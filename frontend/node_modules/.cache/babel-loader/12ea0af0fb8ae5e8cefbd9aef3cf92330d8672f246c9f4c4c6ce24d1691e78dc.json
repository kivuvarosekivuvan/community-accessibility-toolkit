{"ast":null,"code":"var _jsxFileName = \"/Users/rose/accessibility-toolkit/src/components/Checklist.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport './styles/Checklist.css';\nimport jsPDF from 'jspdf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Checklist = () => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [checkedItems, setCheckedItems] = useState(() => {\n    const saved = localStorage.getItem('checkedItems');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [progressHistory, setProgressHistory] = useState(() => {\n    const savedHistory = localStorage.getItem('progressHistory');\n    return savedHistory ? JSON.parse(savedHistory) : [];\n  });\n  const [reminder, setReminder] = useState('');\n  const [deadline, setDeadline] = useState('');\n\n  // array of my checklist items each with a text and a tooltip\n  const checklistItems = [{\n    text: t('items.semanticHTML'),\n    tip: t('tips.semanticHTML')\n  }, {\n    text: t('items.altText'),\n    tip: t('tips.altText')\n  }, {\n    text: t('items.keyboardNavigation'),\n    tip: t('tips.keyboardNavigation')\n  }, {\n    text: t('items.colorContrast'),\n    tip: t('tips.colorContrast')\n  }, {\n    text: t('items.ariaRoles'),\n    tip: t('tips.ariaRoles')\n  }];\n\n  // This toggles the checked state of an item. If the item is already checked, it removes it; otherwise, it adds it to the list of checked items\n  const handleCheck = item => {\n    const updatedItems = checkedItems.includes(item) ? checkedItems.filter(i => i !== item) : [...checkedItems, item];\n    setCheckedItems(updatedItems);\n\n    //  I'm updating progressHistory by adding a new entry with the current date and the updated list of checked items\n    setProgressHistory(prevHistory => [...prevHistory, {\n      date: new Date().toLocaleString(),\n      items: updatedItems\n    }]);\n  };\n\n  // this hook here synchronize checkedItems and progressHistory with local storage whenever they change (set to occur at the same time)\n  useEffect(() => {\n    localStorage.setItem('checkedItems', JSON.stringify(checkedItems));\n    localStorage.setItem('progressHistory', JSON.stringify(progressHistory));\n  }, [checkedItems, progressHistory]);\n  const completionPercentage = Math.round(checkedItems.length / checklistItems.length * 100);\n\n  // creating a shareable link containing the checklist data as a URL parameter andClipboard API to copy the link to the clipboard and shows an alert to inform the user\n  const handleShare = () => {\n    const checklistData = JSON.stringify(checkedItems);\n    const shareableLink = `${window.location.origin}/?data=${encodeURIComponent(checklistData)}`;\n    navigator.clipboard.writeText(shareableLink);\n    alert(t('alerts.linkCopied'));\n  };\n  const handleExportPDF = () => {\n    const doc = new jsPDF();\n    doc.text(t('checklist.title'), 20, 20);\n    checklistItems.forEach((item, index) => {\n      const status = checkedItems.includes(item.text) ? \"✔️\" : \"❌\";\n      doc.text(`${status} ${item.text}`, 20, 30 + index * 10);\n    });\n    doc.save(\"checklist.pdf\");\n  };\n  const handleSetReminder = () => {\n    if (!deadline) {\n      alert(t('alerts.setValidDeadline'));\n      return;\n    }\n    alert(t('alerts.reminderSet', {\n      reminder,\n      deadline\n    }));\n    setReminder('');\n    setDeadline('');\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      const deadlineDate = new Date(deadline);\n      if (deadlineDate && deadlineDate <= now) {\n        alert(t('alerts.reminderAlert'));\n        setDeadline('');\n      }\n    }, 60000);\n    return () => clearInterval(interval);\n  }, [deadline]);\n  const clearProgressHistory = () => {\n    setProgressHistory([]);\n    localStorage.removeItem('progressHistory');\n    alert(t('alerts.clearProgressHistory'));\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"checklist-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: t('checklist.title')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        style: {\n          width: `${completionPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"completion-text\",\n      children: [completionPercentage, \" \", t('checklist.completed')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"checklist\",\n      children: checklistItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: checkedItems.includes(item.text) ? 'checked' : '',\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: checkedItems.includes(item.text),\n            onChange: () => handleCheck(item.text)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"checkmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), item.text, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tooltip\",\n            children: item.tip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)\n      }, item.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShare,\n      className: \"share-button\",\n      children: t('checklist.shareChecklist')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExportPDF,\n      className: \"export-button\",\n      children: t('checklist.exportPDF')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reminder-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: reminder,\n        onChange: e => setReminder(e.target.value),\n        placeholder: t('checklist.reminderMessage')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        value: deadline,\n        onChange: e => setDeadline(e.target.value),\n        placeholder: t('checklist.deadline')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSetReminder,\n        className: \"set-reminder-button\",\n        children: t('checklist.setReminder')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"history-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: t('checklist.progressHistory')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: progressHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [entry.date, \": \", entry.items.join(', ')]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearProgressHistory,\n        className: \"clear-history-button\",\n        children: t('checklist.clearHistory')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Checklist, \"wR6Fig+moGt53M6e9wDV1wX5m0U=\", false, function () {\n  return [useTranslation];\n});\n_c = Checklist;\nexport default Checklist;\nvar _c;\n$RefreshReg$(_c, \"Checklist\");","map":{"version":3,"names":["React","useEffect","useState","useTranslation","jsPDF","jsxDEV","_jsxDEV","Checklist","_s","t","checkedItems","setCheckedItems","saved","localStorage","getItem","JSON","parse","progressHistory","setProgressHistory","savedHistory","reminder","setReminder","deadline","setDeadline","checklistItems","text","tip","handleCheck","item","updatedItems","includes","filter","i","prevHistory","date","Date","toLocaleString","items","setItem","stringify","completionPercentage","Math","round","length","handleShare","checklistData","shareableLink","window","location","origin","encodeURIComponent","navigator","clipboard","writeText","alert","handleExportPDF","doc","forEach","index","status","save","handleSetReminder","interval","setInterval","now","deadlineDate","clearInterval","clearProgressHistory","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","map","type","checked","onChange","onClick","value","e","target","placeholder","entry","join","_c","$RefreshReg$"],"sources":["/Users/rose/accessibility-toolkit/src/components/Checklist.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport './styles/Checklist.css';\nimport jsPDF from 'jspdf';\n\nconst Checklist = () => {\n  const { t } = useTranslation();\n  const [checkedItems, setCheckedItems] = useState(() => {\n    const saved = localStorage.getItem('checkedItems');\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  const [progressHistory, setProgressHistory] = useState(() => {\n    const savedHistory = localStorage.getItem('progressHistory');\n    return savedHistory ? JSON.parse(savedHistory) : [];\n  });\n\n  const [reminder, setReminder] = useState('');\n  const [deadline, setDeadline] = useState('');\n\n  // array of my checklist items each with a text and a tooltip\n  const checklistItems = [\n    { text: t('items.semanticHTML'), tip: t('tips.semanticHTML') },\n    { text: t('items.altText'), tip: t('tips.altText') },\n    { text: t('items.keyboardNavigation'), tip: t('tips.keyboardNavigation') },\n    { text: t('items.colorContrast'), tip: t('tips.colorContrast') },\n    { text: t('items.ariaRoles'), tip: t('tips.ariaRoles') },\n  ];\n\n\n  // This toggles the checked state of an item. If the item is already checked, it removes it; otherwise, it adds it to the list of checked items\n  const handleCheck = (item) => {\n    const updatedItems = checkedItems.includes(item)\n      ? checkedItems.filter(i => i !== item)\n      : [...checkedItems, item];\n\n    setCheckedItems(updatedItems);\n\n    //  I'm updating progressHistory by adding a new entry with the current date and the updated list of checked items\n    setProgressHistory(prevHistory => [\n      ...prevHistory,\n      { date: new Date().toLocaleString(), items: updatedItems }\n    ]);\n  };\n\n\n  // this hook here synchronize checkedItems and progressHistory with local storage whenever they change (set to occur at the same time)\n  useEffect(() => {\n    localStorage.setItem('checkedItems', JSON.stringify(checkedItems));\n    localStorage.setItem('progressHistory', JSON.stringify(progressHistory));\n  }, [checkedItems, progressHistory]);\n\n  const completionPercentage = Math.round((checkedItems.length / checklistItems.length) * 100);\n\n\n  // creating a shareable link containing the checklist data as a URL parameter andClipboard API to copy the link to the clipboard and shows an alert to inform the user\n  const handleShare = () => {\n    const checklistData = JSON.stringify(checkedItems);\n    const shareableLink = `${window.location.origin}/?data=${encodeURIComponent(checklistData)}`;\n    navigator.clipboard.writeText(shareableLink);\n    alert(t('alerts.linkCopied'));\n  };\n\n  const handleExportPDF = () => {\n    const doc = new jsPDF();\n    doc.text(t('checklist.title'), 20, 20);\n    checklistItems.forEach((item, index) => {\n      const status = checkedItems.includes(item.text) ? \"✔️\" : \"❌\";\n      doc.text(`${status} ${item.text}`, 20, 30 + (index * 10));\n    });\n    doc.save(\"checklist.pdf\");\n  };\n\n  const handleSetReminder = () => {\n    if (!deadline) {\n      alert(t('alerts.setValidDeadline'));\n      return;\n    }\n    alert(t('alerts.reminderSet', { reminder, deadline }));\n    setReminder('');\n    setDeadline('');\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      const deadlineDate = new Date(deadline);\n      if (deadlineDate && deadlineDate <= now) {\n        alert(t('alerts.reminderAlert'));\n        setDeadline('');\n      }\n    }, 60000);\n\n    return () => clearInterval(interval);\n  }, [deadline]);\n\n  const clearProgressHistory = () => {\n    setProgressHistory([]);\n    localStorage.removeItem('progressHistory');\n    alert(t('alerts.clearProgressHistory'));\n  };\n\n  return (\n    <section className=\"checklist-section\">\n      <h2>{t('checklist.title')}</h2>\n      <div className=\"progress-bar\">\n        <div className=\"progress\" style={{ width: `${completionPercentage}%` }} />\n      </div>\n      <p className=\"completion-text\">{completionPercentage} {t('checklist.completed')}</p>\n      <ul className=\"checklist\">\n        {checklistItems.map(item => (\n          <li key={item.text} className={checkedItems.includes(item.text) ? 'checked' : ''}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={checkedItems.includes(item.text)}\n                onChange={() => handleCheck(item.text)}\n              />\n              <span className=\"checkmark\"></span>\n              {item.text}\n              <span className=\"tooltip\">{item.tip}</span>\n            </label>\n          </li>\n        ))}\n      </ul>\n      <button onClick={handleShare} className=\"share-button\">{t('checklist.shareChecklist')}</button>\n      <button onClick={handleExportPDF} className=\"export-button\">{t('checklist.exportPDF')}</button>\n      <div className=\"reminder-section\">\n        <input\n          type=\"text\"\n          value={reminder}\n          onChange={(e) => setReminder(e.target.value)}\n          placeholder={t('checklist.reminderMessage')}\n        />\n        <input\n          type=\"datetime-local\"\n          value={deadline}\n          onChange={(e) => setDeadline(e.target.value)}\n          placeholder={t('checklist.deadline')}\n        />\n        <button onClick={handleSetReminder} className=\"set-reminder-button\">{t('checklist.setReminder')}</button>\n      </div>\n      <div className=\"history-section\">\n        <h3>{t('checklist.progressHistory')}</h3>\n        <ul>\n          {progressHistory.map((entry, index) => (\n            <li key={index}>{entry.date}: {entry.items.join(', ')}</li>\n          ))}\n        </ul>\n        <button onClick={clearProgressHistory} className=\"clear-history-button\">{t('checklist.clearHistory')}</button>\n      </div>\n    </section>\n  );\n};\n\nexport default Checklist;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}